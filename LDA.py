import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
from PIL import Image, ImageTk
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from gensim import corpora, models
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Bi·∫øn to√†n c·ª•c
steps = []
current_step = 0
img_path = None
img_gray = None
patches = None
words = None
dictionary = None
corpus = None
lda_model = None
restored_image = None

def select_image():
    global img_path, current_step
    file = filedialog.askopenfilename(filetypes=[("Image files", "*.png *.jpg *.jpeg")])
    if file:
        img_path = file
        current_step = 0
        steps.clear()
        define_steps()
        show_step()

def define_steps():
    steps.append(step_show_original)
    steps.append(step_gray_resize)
    steps.append(step_split_patches)
    steps.append(step_kmeans)
    steps.append(step_lda)
    steps.append(step_show_topic)
    steps.append(step_restore_image)  # B∆∞·ªõc ph·ª•c h·ªìi ·∫£nh

def show_step():
    if current_step < len(steps):
        steps[current_step]()
    else:
        status_label.config(text="‚úÖ Ho√†n t·∫•t qu√° tr√¨nh n√©n v√† gi·∫£i n√©n ·∫£nh b·∫±ng LDA.")
        step_label.config(text="Ho√†n th√†nh")

def next_step():
    global current_step
    if current_step < len(steps) - 1:
        current_step += 1
        show_step()

def step_show_original():
    img = Image.open(img_path)
    show_image(img)
    status_label.config(text="B∆∞·ªõc 1: ·∫¢nh g·ªëc")
    step_label.config(text="B∆∞·ªõc 1: ·∫¢nh g·ªëc")

def step_gray_resize():
    global img_gray
    img = Image.open(img_path).convert("L").resize((128, 128))
    img_gray = np.array(img)
    show_image(Image.fromarray(img_gray))
    status_label.config(text="B∆∞·ªõc 2: Chuy·ªÉn ·∫£nh sang x√°m v√† resize 128x128")
    step_label.config(text="B∆∞·ªõc 2: Chuy·ªÉn ·∫£nh sang x√°m v√† resize 128x128")

def step_split_patches():
    global patches
    patch_size = 8
    h, w = img_gray.shape
    patches = []
    for i in range(0, h, patch_size):
        for j in range(0, w, patch_size):
            patch = img_gray[i:i+patch_size, j:j+patch_size].flatten()
            if patch.size == patch_size * patch_size:
                patches.append(patch)
    patches = np.array(patches)
    status_label.config(text=f"B∆∞·ªõc 3: Chia ·∫£nh th√†nh {len(patches)} patch (8x8)")
    step_label.config(text="B∆∞·ªõc 3: Chia ·∫£nh th√†nh {len(patches)} patch (8x8)")

def step_kmeans():
    global words
    kmeans = KMeans(n_clusters=50, random_state=42, n_init=10)
    kmeans.fit(patches)
    words = kmeans.predict(patches)
    status_label.config(text="B∆∞·ªõc 4: G√°n m·ªói patch th√†nh 1 t·ª´ b·∫±ng KMeans")
    step_label.config(text="B∆∞·ªõc 4: G√°n m·ªói patch th√†nh t·ª´ 1 b·∫±ng KMeans")

def step_lda():
    global dictionary, corpus, lda_model
    doc = [str(w) for w in words]
    dictionary = corpora.Dictionary([doc])
    corpus = [dictionary.doc2bow(doc)]
    lda_model = models.LdaModel(corpus=corpus, id2word=dictionary, num_topics=5, random_state=42)
    status_label.config(text="B∆∞·ªõc 5: √Åp d·ª•ng LDA ƒë·ªÉ n√©n ·∫£nh")
    step_label.config(text="B∆∞·ªõc 5: √Åp d·ª•ng LDA ƒë·ªÉ n√©n ·∫£nh")

def step_show_topic():
    topic_dist = lda_model.get_document_topics(corpus[0], minimum_probability=0)
    topics = [f"Topic {i}" for i, _ in topic_dist]
    values = [v for _, v in topic_dist]

    fig, ax = plt.subplots(figsize=(4, 3))
    ax.bar(topics, values, color='skyblue')
    ax.set_title("B∆∞·ªõc 6: Bi·ªÉu ƒë·ªì ph√¢n b·ªë ch·ªß ƒë·ªÅ (LDA n√©n ·∫£nh)")
    ax.set_ylabel("X√°c su·∫•t")

    for widget in plot_frame.winfo_children():
        widget.destroy()
    canvas = FigureCanvasTkAgg(fig, master=plot_frame)
    canvas.draw()
    canvas.get_tk_widget().pack()
    status_label.config(text="B∆∞·ªõc 6: Bi·ªÉu ƒë·ªì ph√¢n b·ªë ch·ªß ƒë·ªÅ")
    step_label.config(text="B∆∞·ªõc 6: Bi·ªÉu ƒë·ªì ph√¢n b·ªë ch·ªß ƒë·ªÅ")

def step_restore_image():
    global restored_image
    patch_size = 8
    # L·∫•y ch·ªß ƒë·ªÅ c·ªßa ·∫£nh
    topic_dist = lda_model.get_document_topics(corpus[0], minimum_probability=0)
    dominant_topic = np.argmax([v for _, v in topic_dist])
    
    # Ph√¢n lo·∫°i l·∫°i t·ª´ng patch theo topic ƒë√£ h·ªçc t·ª´ LDA
    patch_topics = []
    for word in words:
        bow = dictionary.doc2bow([str(word)])
        topic_probs = lda_model.get_document_topics(bow, minimum_probability=0)
        patch_topics.append(np.argmax([v for _, v in topic_probs]))  # Ch·ªçn ch·ªß ƒë·ªÅ c√≥ x√°c su·∫•t cao nh·∫•t
    patch_topics = np.array(patch_topics)

    # Trung b√¨nh patch theo topic
    num_topics = lda_model.num_topics
    avg_patches = np.zeros((num_topics, patches.shape[1]))
    for t in range(num_topics):
        indices = np.where(patch_topics == t)[0]
        if len(indices) > 0:
            avg_patches[t] = np.mean(patches[indices], axis=0)  # T√≠nh trung b√¨nh c·ªßa c√°c patch thu·ªôc c√πng m·ªôt ch·ªß ƒë·ªÅ

    # Ph·ª•c h·ªìi patch theo topic ƒë√£ ph√¢n
    restored_patches = avg_patches[patch_topics]  # Gh√©p c√°c patch theo topic

    # Gh√©p l·∫°i ·∫£nh t·ª´ c√°c patch ƒë√£ ph·ª•c h·ªìi
    h, w = img_gray.shape
    restored_image = np.zeros_like(img_gray)
    idx = 0
    for i in range(0, h, patch_size):
        for j in range(0, w, patch_size):
            restored_image[i:i+patch_size, j:j+patch_size] = restored_patches[idx].reshape(patch_size, patch_size)
            idx += 1

    restored_image = np.clip(restored_image, 0, 255).astype(np.uint8)  # C·∫Øt gi√° tr·ªã pixel trong kho·∫£ng 0-255
    
    # Hi·ªÉn th·ªã ·∫£nh ph·ª•c h·ªìi
    show_image(Image.fromarray(restored_image))
    status_label.config(text="B∆∞·ªõc 7: Ph·ª•c h·ªìi ·∫£nh m·ªù t·ª´ topic dominant")
    step_label.config(text="B∆∞·ªõc 7: Ph·ª•c h·ªìi ·∫£nh m·ªù t·ª´ topic dominant")

def show_image(img):
    max_width, max_height = 300, 300  # K√≠ch th∆∞·ªõc t·ªëi ƒëa cho ·∫£nh
    img.thumbnail((max_width, max_height))  # Gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh n·∫øu c·∫ßn
    img_tk = ImageTk.PhotoImage(img)
    image_label.config(image=img_tk)
    image_label.image = img_tk

# === Giao di·ªán ===
# T·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("üì¶ M√¥ ph·ªèng n√©n ·∫£nh b·∫±ng LDA - t·ª´ng b∆∞·ªõc")
root.geometry("500x650")
root.configure(bg="#1e1e2f")

# Font ch·ªØ chung
FONT_TITLE = ("Segoe UI", 20, "bold")
FONT_BUTTON = ("Segoe UI", 12, "bold")
FONT_STATUS = ("Segoe UI", 11)
FONT_IMAGE_LABEL = ("Segoe UI", 10, "italic")

# Ti√™u ƒë·ªÅ ƒë·∫πp m·∫Øt
title_label = tk.Label(root, text="üì¶ M√¥ ph·ªèng n√©n ·∫£nh b·∫±ng LDA", 
                       font=FONT_TITLE, fg="#00b0f4", bg="#1e1e2f")
title_label.pack(pady=(30, 15))

# Nh√£n hi·ªÉn th·ªã tr·∫°ng th√°i b∆∞·ªõc ƒëang l√†m
step_label = tk.Label(root, text="B∆∞·ªõc 1: ·∫¢nh g·ªëc", font=("Segoe UI", 12), fg="#f1f1f1", bg="#1e1e2f")
step_label.pack(pady=10)

# Khung ch·ª©a n√∫t ch·ªçn ·∫£nh v√† n√∫t Ti·∫øp theo
button_frame = tk.Frame(root, bg="#1e1e2f")
button_frame.pack(pady=10)

btn_select = ttk.Button(button_frame, text="üìÇ Ch·ªçn ·∫£nh", command=select_image)
btn_select.grid(row=0, column=0, padx=10)

btn_next = ttk.Button(button_frame, text="‚û°Ô∏è Ti·∫øp theo", command=next_step)
btn_next.grid(row=0, column=1, padx=10)

# Khung hi·ªÉn th·ªã ·∫£nh
image_frame = tk.Frame(root, width=320, height=320, bg="#292d3e", relief="ridge", borderwidth=4)
image_frame.pack(pady=20)
image_frame.pack_propagate(False)

image_label = tk.Label(image_frame, bg="#292d3e")
image_label.pack(expand=True)

img_desc_label = tk.Label(root, text="·∫¢nh hi·ªÉn th·ªã s·∫Ω hi·ªán t·∫°i ƒë√¢y", 
                          font=FONT_IMAGE_LABEL, fg="#a0a0a0", bg="#1e1e2f")
img_desc_label.pack()

# Khung hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (Matplotlib canvas s·∫Ω ƒë·∫∑t ·ªü ƒë√¢y)
plot_frame = tk.Frame(root, width=420, height=300, bg="#292d3e", relief="ridge", borderwidth=3)
plot_frame.pack(pady=20)
plot_frame.pack_propagate(False)

plot_label = tk.Label(plot_frame, text="Bi·ªÉu ƒë·ªì ph√¢n b·ªë ch·ªß ƒë·ªÅ s·∫Ω hi·ªán t·∫°i ƒë√¢y", 
                      font=FONT_IMAGE_LABEL, fg="#a0a0a0", bg="#292d3e")
plot_label.pack(expand=True)

# Thanh tr·∫°ng th√°i ƒë·∫πp
status_label = tk.Label(root, text="üìå Vui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu", 
                        font=FONT_STATUS, fg="#00f6ff", bg="#1e1e2f", anchor="center")
status_label.pack(fill="x", pady=15, ipady=5)

# T√πy ch·ªânh style cho ttk.Button
style = ttk.Style()
style.theme_use('clam')
style.configure("TButton",
                font=FONT_BUTTON,
                foreground="#ffffff",
                background="#005c99",
                padding=10,
                relief="flat",  # Gi·∫£m khung vi·ªÅn
                borderwidth=0)  # Kh√¥ng c√≥ vi·ªÅn

# Th√™m hi·ªáu ·ª©ng hover v√† b·∫•m
def on_hover_in(event):
    event.widget.config(background="#007acc", relief="solid", borderwidth=2)  # Khi hover v√†o n√∫t
    event.widget.config(foreground="#ffffff")  # ƒê·ªïi m√†u ch·ªØ

def on_hover_out(event):
    event.widget.config(background="#005c99", relief="flat", borderwidth=0)  # Khi hover ra ngo√†i
    event.widget.config(foreground="#ffffff")  # ƒê·ªïi l·∫°i m√†u ch·ªØ khi kh√¥ng hover

def on_button_press(event):
    event.widget.config(background="#003f66", relief="sunken", borderwidth=2)  # Khi b·∫•m n√∫t
    event.widget.config(foreground="#ffffff")  # ƒê·ªïi m√†u ch·ªØ khi b·∫•m

def on_button_release(event):
    event.widget.config(background="#005c99", relief="flat", borderwidth=0)  # Khi nh·∫£ n√∫t
    event.widget.config(foreground="#ffffff")  # ƒê·ªïi l·∫°i m√†u ch·ªØ khi nh·∫£

# G√°n s·ª± ki·ªán cho n√∫t
btn_select.bind("<Enter>", on_hover_in)
btn_select.bind("<Leave>", on_hover_out)
btn_select.bind("<ButtonPress-1>", on_button_press)
btn_select.bind("<ButtonRelease-1>", on_button_release)

btn_next.bind("<Enter>", on_hover_in)
btn_next.bind("<Leave>", on_hover_out)
btn_next.bind("<ButtonPress-1>", on_button_press)
btn_next.bind("<ButtonRelease-1>", on_button_release)

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
root.mainloop()
